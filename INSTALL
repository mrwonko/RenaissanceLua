INSTALL for Renaissance Lua 5.1

* Building Lua
  ------------
  
  Use CMake to generate a project/Makefile as usual. There are a couple of
  options you can set to tailor it to your platform and needs.

* Installing Lua
  --------------
  CMake generates an install target that install Lua to the directory
  defined by CMAKE_INSTALL_PREFIX.

* Customization
  -------------
  Three things can be customized by editing a file:
    - How to build Lua -- edit CMakeLists.txt.
    - Lua features -- edit src/luaconf.h.

  We strongly recommend that you enable dynamic loading. This is done
  automatically for all platforms listed above that have this feature
  (and also Windows). See src/luaconf.h and also CMakeLists.txt.

* Building Lua without CMake
  -----------------------------------------
  If you're not using CMake tools, then the instructions for
  building Lua depend on the compiler you use. You'll need to create
  projects (or whatever your compiler uses) for building the library,
  the interpreter, and the compiler, as follows:

  library:
    lapi.c lcode.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c
    lmem.c lobject.c lopcodes.c lparser.c lstate.c lstring.c
    ltable.c ltm.c lundump.c lvm.c lzio.c
    lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c loslib.c
    ltablib.c lstrlib.c loadlib.c linit.c

  interpreter:
    library, lua.c

  compiler:
    library, luac.c print.c

  If you use Visual Studio .NET, you can use etc/luavs.bat in its
  "Command Prompt".

  If all you want is to build the Lua interpreter, you may put all .c files
  in a single project, except for luac.c and print.c. Or just use etc/all.c.

  To use Lua as a library in your own programs, you'll need to know how to
  create and use libraries with your compiler.

  As mentioned above, you may edit luaconf.h to select some features before
  building Lua.

(end of INSTALL)
